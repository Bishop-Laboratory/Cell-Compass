SINGLE = [
  "SRR10078333",
  "SRR10078334",
  "SRR10078335",
  "SRR10078336",
  "SRR10078337",
  "SRR10078338",
  "SRR10078339",
  "SRR10078340",
  "SRR10078341",
  "SRR10078342",
  "SRR10078343",
  "SRR10078344",
  "SRR10078345",
  "SRR10078346",
  "SRR10078347",
  "SRR10078348",
  "SRR10078349",
  "SRR10078350",
  "SRR10078351",
  "SRR10078352",
  "SRR10078353",
  "SRR10078354",
  "SRR10078355",
  "SRR10078356",
  "SRR10078357",
  "SRR10078358",
  "SRR10078359",
]

PAIRED = [
  "SRR10078360",
  "SRR10078361",
  "SRR10078362",
  "SRR10078363",
  "SRR10078364",
  "SRR10078365",
  "SRR10078366",
  "SRR10078367",
  "SRR10078368",
  "SRR10078369",
  "SRR10078370",
  "SRR10078371",
  "SRR10078372",
  "SRR10078373",
  "SRR10078374",
  "SRR10078375",
  "SRR10078376",
  "SRR10078377",
  "SRR10078378",
  "SRR10078379",
  "SRR10078380",
  "SRR10078381",
  "SRR10078382",
  "SRR10078383",
  "SRR10078384",
  "SRR10078385",
  "SRR10078386",
  "SRR10078387",
  "SRR10078388",
  "SRR10078389",
  "SRR10078390",
  "SRR10078391",
  "SRR10078392",
  "SRR10078393",
  "SRR10078394",
  "SRR10078395",
  "SRR10078396",
  "SRR10078397",
  "SRR10078398",
  "SRR10078399",
  "SRR10078400",
  "SRR10078401",
  "SRR10078402",
  "SRR10078403",
  "SRR10078404",
  "SRR10078405",
  "SRR10078406",
  "SRR10078407",
  "SRR10078408",
  "SRR10078409",
  "SRR10078410",
  "SRR10078411",
  "SRR10078412",
  "SRR10078413",
  "SRR10078414",
  "SRR10078415",
  "SRR10078416",
  "SRR10078417",
  "SRR10078418",
]

# Default to this rule if no explicit output given
rule quant_all:  
    input:
        expand("quants/{run_id}/quant.sf", run_id=SINGLE),
        expand("quants/{run_id}/quant.sf", run_id=PAIRED)

rule download_runs:
    output:
        expand("sras/{run_id}/{run_id}.sra", run_id=SINGLE),
        expand("sras/{run_id}/{run_id}.sra", run_id=PAIRED)
    shell:  # prefetch won't redownload runs that already exist
        "prefetch -O sras SRP220652"

rule download_ref_transcripts:
    output:
        "gencode.vM10.transcripts.fa.gz"
    shell:
        "wget https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M10/gencode.vM10.transcripts.fa.gz"

rule build_index:
    input:
        "gencode.vM10.transcripts.fa.gz"
    output:
        "mm10_transcript_index"
    shell:
        "salmon index --gencode -t gencode.vM10.transcripts.fa.gz -i mm10_transcript_index"

rule fasterq_dumps_single:
    input:
        "sras/{run_id}/{run_id}.sra"
    output:
        "sras/{run_id}/{run_id}.sra.fastq"
    shell:
        "fasterq-dump {input} -O sras/{wildcards.run_id}"
        
rule fasterq_dumps_paired:
    input:
        "sras/{run_id}/{run_id}.sra"
    output:
        "sras/{run_id}/{run_id}.sra_1.fastq",
        "sras/{run_id}/{run_id}.sra_2.fastq"
    shell:
        "fasterq-dump {input} -O sras/{wildcards.run_id}"

def get_fastqs(wildcards):
    run_id = wildcards.run_id
    output = dict()
    if run_id in SINGLE:
        output["f"] = f"sras/{run_id}/{run_id}.sra.fastq"
    elif run_id in PAIRED:
        output["f1"] = f"sras/{run_id}/{run_id}.sra_1.fastq",
        output["f2"] = f"sras/{run_id}/{run_id}.sra_2.fastq",
    return output

rule salmon_quant:
    input:
        unpack(get_fastqs),
        "mm10_transcript_index"
    output:
        "quants/{run_id}/quant.sf"
    run:
        if wildcards.run_id in SINGLE:
            cmd = f"salmon quant -i mm10_transcript_index -l A " + \
                  f"-r {input.f} --validateMappings " + \
                  f"-o quants/{wildcards.run_id}"
            shell(cmd)
            shell(f"rm {input.f}")  # Delete fastqs to save space
        elif wildcards.run_id in PAIRED:
            cmd = f"salmon quant -i mm10_transcript_index -l A " + \
                  f"-1 {input.f1} -2 {input.f2} --validateMappings " + \
                  f"-o quants/{wildcards.run_id}"
            shell(cmd)
            shell(f"rm {input.f1} {input.f2}")  # Delete fastqs to save space
